{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nlet intervalId = null;\nlet featureTime = null;\nconst startBtn = document.querySelector(`button`);\n\nconst clockFace = document.querySelectorAll(`.value`);\nconst inputTime = document.querySelector(`#datetime-picker`);\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    featureTime = selectedDates[0];\n    intervalId = featureTime - new Date();\n    if (intervalId < 1) {\n      iziToast.error({\n        color: `red`,\n        position: `topRight`,\n        message: `Please choose a date in the future`,\n      });\n    } else {\n      startBtn.disabled = false;\n      inputTime.disabled = true;\n      startBtn.classList.add(`btn-active`);\n      }\n    },\n};\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n};\n\nconst calendar = flatpickr(`#datetime-picker`, options);\n\nconsole.log(clockFace);\n\n//----------------------------------------------------------\nstartBtn.disabled = true;\n\nstartBtn.addEventListener(`click`, event => {\n  intervalId = setInterval(() => {\n    const deltaTime = featureTime - new Date();\n    startBtn.classList.remove(`btn-active`);\n\n    if (deltaTime < 1) {\n      startBtn.disabled = true;\n      clearInterval(intervalId);\n      return;\n    }\n    const timer = convertMs(deltaTime);\n    clockFace[0].innerText = timer.days.toString().padStart(2, '0');\n    clockFace[1].innerText = timer.hours.toString().padStart(2, '0');\n    clockFace[2].innerText = timer.minutes.toString().padStart(2, '0');\n    clockFace[3].innerText = timer.seconds.toString().padStart(2, '0');\n    \n}, 1000);\n\n});\n\n\n"],"names":["intervalId","featureTime","startBtn","clockFace","inputTime","options","selectedDates","iziToast","convertMs","ms","days","hours","minutes","seconds","flatpickr","event","deltaTime","timer"],"mappings":"2FAMA,IAAIA,EAAa,KACbC,EAAc,KAClB,MAAMC,EAAW,SAAS,cAAc,QAAQ,EAE1CC,EAAY,SAAS,iBAAiB,QAAQ,EAC9CC,EAAY,SAAS,cAAc,kBAAkB,EAErDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBL,EAAcK,EAAc,CAAC,EAC7BN,EAAaC,EAAc,IAAI,KAC3BD,EAAa,EACfO,EAAS,MAAM,CACb,MAAO,MACP,SAAU,WACV,QAAS,oCACjB,CAAO,GAEDL,EAAS,SAAW,GACpBE,EAAU,SAAW,GACrBF,EAAS,UAAU,IAAI,YAAY,EAEpC,CACL,EAEA,SAASM,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEiBC,EAAU,mBAAoBT,CAAO,EAEtD,QAAQ,IAAIF,CAAS,EAGrBD,EAAS,SAAW,GAEpBA,EAAS,iBAAiB,QAASa,GAAS,CAC1Cf,EAAa,YAAY,IAAM,CAC7B,MAAMgB,EAAYf,EAAc,IAAI,KAGpC,GAFAC,EAAS,UAAU,OAAO,YAAY,EAElCc,EAAY,EAAG,CACjBd,EAAS,SAAW,GACpB,cAAcF,CAAU,EACxB,MACD,CACD,MAAMiB,EAAQT,EAAUQ,CAAS,EACjCb,EAAU,CAAC,EAAE,UAAYc,EAAM,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC9Dd,EAAU,CAAC,EAAE,UAAYc,EAAM,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC/Dd,EAAU,CAAC,EAAE,UAAYc,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EACjEd,EAAU,CAAC,EAAE,UAAYc,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,CAErE,EAAG,GAAI,CAEP,CAAC"}